## Get AWS DLC

$(aws ecr get-login --registry-ids 763104351884 --no-include-email)

docker pull 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04

docker run -it --name working 763104351884.dkr.ecr.us-west-2.amazonaws.com/tensorflow-training:1.15.2-gpu-py36-cu100-ubuntu18.04 /bin/bash

## install cmake 3.17
apt remove cmake
apt update
curl -sSL https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-Linux-x86_64.tar.gz | tar -xzC /opt
mv /opt/cmake-3.17.2-Linux-x86_64 /opt/cmake
ln -s /opt/cmake/bin/cmake /usr/bin/cmake

## opencv
apt install python3-opencv

## fix /usr/local/cuda-10.0/compat/libcuda.so
sudo bash -c 'echo "/usr/local/cuda-10.0/compat" > /etc/ld.so.conf.d/cuda.conf'
sudo ldconfig -v

## Build darknet
cd opt;git clone https://github.com/AlexeyAB/darknet
cd darknet
./build.sh

wget https://pjreddie.com/media/files/yolov3.weights

## commit docker images
open another terminal
docker ps
docker commit cd6d30372fbd 476271697919.dkr.ecr.us-west-2.amazonaws.com/tensor-gpu-yolo:latest
aws ecr create-repository --repository-name tensor-gpu-yolo
$(aws ecr get-login --no-include-email)
docker push 476271697919.dkr.ecr.us-west-2.amazonaws.com/tensor-gpu-yolo:latest

## open p2
$(aws ecr get-login --no-include-email)
docker pull 476271697919.dkr.ecr.us-west-2.amazonaws.com/tensor-gpu-yolo:latest
nvidia-docker run -it --name yolo 476271697919.dkr.ecr.us-west-2.amazonaws.com/tensor-gpu-yolo:latest /bin/bash
cd /opt/darknet
./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg

## cheers
Loading weights from yolov3.weights...
 seen 64, trained: 32013 K-images (500 Kilo-batches_64)
Done! Loaded 107 layers from weights-file
data/dog.jpg: Predicted in 235.283000 milli-seconds.
bicycle: 99%
dog: 100%
truck: 93%


## Training customized data set

Overview:
1. yolo-obj.cfg (batch, subdivisions, max_batches, classes, filters)
2. obj.names
3. obj.data
4. image files
5. annotation file: <object-class> <x_center> <y_center> <width> <height> normalized (divided) by the image width and height respectively.
6. train.txt
7. pre-trained weights
8. ./darknet detector train data/obj.data yolo-obj.cfg yolov4.conv.137 -dont_show


* [YoloV4 Detect your custom objects](https://github.com/AlexeyAB/darknet/tree/master#how-to-train-to-detect-your-custom-objects)

* [YoloV3 pjreddie training](https://github.com/pjreddie/darknet/wiki/YOLO:-Real-Time-Object-Detection#training-yolo)

* [Blog-YoloV3 training your customer data](https://www.learnopencv.com/training-yolov3-deep-learning-based-custom-object-detector/)

* Although it is pytorch version, but the configration is almost the same as original Yolo. [Yolo config format](https://github.com/ultralytics/yolov3/wiki/Train-Custom-Data#train-on-custom-data)
Download Pretrained Convolutional Weights: csdarknet53-omega.conv.105
https://drive.google.com/open?id=18jCwaL4SJ-jOvXrZNGHJ5yz44g9zi8Hm

download weights csdarknet53-omega_final.weights for Classifier: https://drive.google.com/open?id=18jCwaL4SJ-jOvXrZNGHJ5yz44g9zi8Hm


get only the first 105 layers ./darknet partial cfg/csdarknet53-omega.cfg csdarknet53-omega_final.weights csdarknet53-omega.conv.105 105

Preparing YOLOv3 configuration files
three files(.data, .names and .cfg)

cfg/cat-dog-obj.data
cfg/cat-dog-obj.names


## Reference

https://docs.aws.amazon.com/deep-learning-containers/latest/devguide/deep-learning-containers-images.html

## Check python
python -m site
python
cv2.__version__
cv2.__file__